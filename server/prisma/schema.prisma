// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum InviteStatus {
  ACCEPTED
  REJECTED
  WAIT
}

model User {
  id                String          @id @default(uuid())
  username          String
  email             String          @unique
  password          String      
  role              Role            @default(USER)
  avatar            String          @default("image/no_avatar.png")
  is_banned         Boolean         @default(false)
  created_at        DateTime        @default(now())
  updated_at        DateTime        @default(now())

  chat_admin        Chat[]          @relation("ChatAdmin")
  chat_member       Chat[]          @relation("ChatMembers", references: [id])
  reactions         Reaction[]      @relation("UserReaction")
  messages          Message[]       @relation("UserMessage")
  subs_follower     Subscription[]  @relation("SubscriptionFollower")
  subs_profile      Subscription[]  @relation("SubscriptionProfile")
  posts             Post[]          @relation("UserPost")
  comments          Comment[]       @relation("UserComment")
  post_likes        PostLike[]      @relation("UserPostLike")
  comment_likes     CommentLike[]   @relation("UserCommentLike")
  group_admin       Group[]         @relation("GroupAdmin")
  group_moderator   Group[]         @relation("GroupModerators", references: [id])      
  group_member      Group[]         @relation("GroupMembers", references: [id])
  user_invite       Invite[]        @relation("UserInvite")
  sender_invite     Invite[]        @relation("SenderInvite")

  @@index([username])
  @@index([role])
  @@index([is_banned])
}

model Reaction {
  id                String          @id @default(uuid())
  user_id           String          
  user              User            @relation("UserReaction", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  message_id        String          
  message           Message         @relation("MessageReactions", fields: [message_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content           String
  created_at        DateTime        @default(now())
  updated_at        DateTime        @default(now())
}

model Message {
  id                String          @id @default(uuid())
  chat_id           String          
  chat              Chat            @relation("ChatMessage", fields: [chat_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id           String          
  user              User            @relation("UserMessage", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  //reaction_ids      String[]        @db.Array(ObjectId)
  reactions         Reaction[]      @relation("MessageReactions")
  text              String?     
  image             String?
  audio             String?
  video             String?
  is_read           Boolean         @default(false)
  is_edited         Boolean         @default(false)
  is_forwarded      Boolean         @default(false)
  created_at        DateTime        @default(now())
  updated_at        DateTime        @default(now())

  @@index([text])
}

model Chat {
  id                String          @id @default(uuid())
  admin_id          String          
  admin             User            @relation("ChatAdmin", fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  members           User[]          @relation("ChatMembers", references: [id])
  // message_ids       String[]        @db.Array(ObjectId)
  messages          Message[]       @relation("ChatMessage")//, fields: [message_ids], references: [id])
  is_private        Boolean         @default(false)
  is_secure         Boolean         @default(false)
  created_at        DateTime        @default(now())
  updated_at        DateTime        @default(now())
  
  chat_invite       Invite[]        @relation("ChatInvite")
}

model Invite {
  id                String          @id @default(uuid())
  sender_id         String          
  sender            User            @relation("SenderInvite", fields: [sender_id], references: [id])
  user_id           String          
  user              User            @relation("UserInvite", fields: [user_id], references: [id])
  chat_id           String?         
  chat              Chat?           @relation("ChatInvite", fields: [chat_id], references: [id])
  group_id          String?         
  group             Group?          @relation("GroupInvite", fields: [group_id], references: [id])
  status            InviteStatus    @default(WAIT)
  created_at        DateTime        @default(now())
  updated_at        DateTime        @default(now())
}

model Subscription {
  id                String          @id @default(uuid())
  follower_id       String          
  follower          User            @relation("SubscriptionFollower", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profile_id        String          
  profile           User            @relation("SubscriptionProfile", fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at        DateTime        @default(now())
  updated_at        DateTime        @default(now())
}

model Post {
  id                String          @id @default(uuid())
  user_id           String          
  user              User            @relation("UserPost", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  group_id          String?         
  group             Group?          @relation("GroupPost", fields: [group_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comments          Comment[]       @relation("PostComment")
  likes             PostLike[]      @relation("PostLike")
  views             Int             @default(0)
  text              String?     
  image             String?
  audio             String?
  video             String?
  created_at        DateTime        @default(now())
  updated_at        DateTime        @default(now())

  @@index([text])
}

model Comment {
  id                String          @id @default(uuid())
  post_id           String          
  post              Post            @relation("PostComment", fields: [post_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id           String          
  user              User            @relation("UserComment", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  likes             CommentLike[]   @relation("CommentLike")
  text              String?     
  image             String?
  audio             String?
  video             String?
  created_at        DateTime        @default(now())
  updated_at        DateTime        @default(now())

  @@index([text])
}

model PostLike {
  id                String          @id @default(uuid())
  post_id           String          
  post              Post            @relation("PostLike", fields: [post_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id           String          
  user              User            @relation("UserPostLike", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at        DateTime        @default(now())
  updated_at        DateTime        @default(now())
}

model CommentLike {
  id                String          @id @default(uuid())
  comment_id        String          
  comment           Comment         @relation("CommentLike", fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id           String          
  user              User            @relation("UserCommentLike", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at        DateTime        @default(now())
  updated_at        DateTime        @default(now())
}

model Group {
  id                String          @id @default(uuid())
  name              String
  avatar            String?         @default("image/no_group_avatar.png")
  admin_id          String          
  admin             User            @relation("GroupAdmin", fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  moderators        User[]          @relation("GroupModerators", references: [id])
  members           User[]          @relation("GroupMembers", references: [id])
  posts             Post[]          @relation("GroupPost")
  is_private        Boolean         @default(false)
  is_secure         Boolean         @default(false)
  created_at        DateTime        @default(now())
  updated_at        DateTime        @default(now())

  group_invite      Invite[]        @relation("GroupInvite")

  @@index([name])
}
